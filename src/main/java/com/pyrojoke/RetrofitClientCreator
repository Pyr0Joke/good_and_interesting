import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.logging.HttpLoggingInterceptor;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

import javax.net.ssl.*;
import java.io.IOException;
import java.security.cert.CertificateException;
import java.util.Objects;

public class RetrofitClientCreator {

    private static Logger logger = LoggerFactory.getLogger(RetrofitClientCreator.class);

    private static Retrofit retrofit;
    private static String env = "";

    public RetrofitClientCreator() {
        String url = "";
        env = System.getenv("env");
        url = "http://myurl/";

        retrofit = new Retrofit.Builder()
                .baseUrl(url)
                .client(getUnsafeOkHttpClient())
                .addConverterFactory(GsonConverterFactory.create())
                .build();
    }

    private static OkHttpClient getUnsafeOkHttpClient() {
        try {
            // Create a trust manager that does not validate certificate chains
            final TrustManager[] trustAllCerts = new TrustManager[] {
                    new X509TrustManager() {
                        @Override
                        public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
                        }

                        @Override
                        public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
                        }

                        @Override
                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                            return new java.security.cert.X509Certificate[]{};
                        }
                    }
            };

            // Install the all-trusting trust manager
            final SSLContext sslContext = SSLContext.getInstance("SSL");
            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());

            // Create an ssl socket factory with our all-trusting manager
            final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();
            OkHttpClient.Builder builder = new OkHttpClient.Builder();
            // Настройки таймаута
//            builder.callTimeout(1, TimeUnit.MINUTES);
//            builder.connectTimeout(1, TimeUnit.MINUTES);
//            builder.readTimeout(1, TimeUnit.MINUTES);
            String log = System.getenv("log");
            if(log == null){
                log = "false";
            }
            if(log.equals("true")){
                HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();
                loggingInterceptor.level(HttpLoggingInterceptor.Level.BODY);
                builder.interceptors().add(loggingInterceptor);
            }
            builder.sslSocketFactory(sslSocketFactory, (X509TrustManager)trustAllCerts[0]);
            builder.hostnameVerifier(new HostnameVerifier() {
                @Override
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            });
            builder.interceptors().add(new Interceptor() {
                @NotNull
                @Override
                public Response intercept(@NotNull Chain chain) throws IOException {
                    Request request = chain.request();
                    // try the request
                    Response response = chain.proceed(request);
                    //Ретраер на запросы, которые не увенчались упехом
//                    int tryCount = 0;
//                    while (!response.isSuccessful() && tryCount < 3) {
//                        logger.info("Повторная попытка отправить запрос по причине: ");
//                        logger.info("Код ошибки: "+response.code()+System.lineSeparator()+"Текст ошибки: "+Objects.requireNonNull(response.networkResponse()).message());
//                        tryCount++;
//                        // retry the request
//                        response = chain.proceed(request);
//                    }

                    while (!response.isSuccessful()) {
                        logger.info("При выполнении запроса произошла ошибка: ");
                        logger.info("Код ошибки: "+response.code()+System.lineSeparator()+"Текст ошибки: "+Objects.requireNonNull(response.message()));
                    }

                    // otherwise just pass the original response on
                    return response;
                }
            });
            return builder.build();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public static String getEnv(){
        return env;
    }

    public static Retrofit getRetrofit() {
        return retrofit;
    }
}
